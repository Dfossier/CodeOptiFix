"""
Post Processor module for the Self-Improving AI Assistant Update Generator.

Validates and refines LLM output for syntax and style conformance.
"""
import ast
import re
import tempfile
import subprocess
import os
from typing import Dict, Optional, List, Any, Tuple
import sys

import config
import utils
from utils import PostProcessingError, setup_logging
from interfaces import CodeCandidate

logger = setup_logging(__name__)

class PostProcessor:
    """Validates and refines the code generated by the LLM."""
    
    def __init__(self):
        """Initialize the post processor."""
        self.logger = logger  # Use the module-level logger
        self.has_black = self._check_black_available()
    
    def _check_black_available(self) -> bool:
        """Check if black formatter is available."""
        try:
            subprocess.run(["black", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            self.logger.warning("Black formatter not found; skipping code formatting")
            return False
    
    def process_candidate(self, candidate: CodeCandidate) -> CodeCandidate:
        """
        Process a code candidate to ensure it's valid and follows best practices.
        
        Args:
            candidate: The code candidate to process
            
        Returns:
            Processed CodeCandidate
        """
        self.logger.info("Processing candidate...")
        try:
            processed_code = self.apply_post_processing(candidate.code)
            metadata = candidate.metadata or {}
            metadata["post_processed"] = True
            self.logger.info("Candidate processed successfully")
            return CodeCandidate(
                code=processed_code,
                comments=candidate.comments,
                metadata=metadata
            )
        except PostProcessingError as e:
            self.logger.error(f"Failed to process candidate: {str(e)}")
            raise
        except Exception as e:
            self.logger.exception(f"Unexpected error processing candidate: {str(e)}")
            raise
    
    def apply_post_processing(self, code: str) -> str:
        """Applies all post-processing steps to the code."""
        try:
            code = self.remove_comments_and_docstrings(code)
            code = self.normalize_code_formatting(code)
            code = self.validate_syntax(code)
            return code
        except Exception as e:
            raise PostProcessingError(f"Error in post-processing: {str(e)}")
    
    def remove_comments_and_docstrings(self, code: str) -> str:
        """Removes comments and docstrings from the code."""
        try:
            tree = ast.parse(code)
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.Module)) and ast.get_docstring(node):
                    node.body = [n for n in node.body if not (isinstance(n, ast.Expr) and isinstance(n.value, ast.Str))]
                    if not node.body:
                        node.body.append(ast.Pass())
            code = re.sub(r'#.*$', '', ast.unparse(tree), flags=re.MULTILINE)
            return code.strip()
        except Exception as e:
            self.logger.error(f"Failed to remove comments/docstrings: {str(e)}")
            raise
    
    def normalize_code_formatting(self, code: str) -> str:
        """Normalizes code formatting using Black if available, otherwise returns original code."""
        if not self.has_black:
            self.logger.debug("Skipping formatting; Black not available")
            return code
        try:
            with tempfile.NamedTemporaryFile(mode='w+', suffix='.py', delete=False) as f:
                f.write(code)
                f.flush()
                try:
                    subprocess.run(
                        ["black", "-q", f.name],
                        check=True,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE
                    )
                    with open(f.name, 'r', encoding='utf-8') as formatted_file:
                        return formatted_file.read()
                except subprocess.CalledProcessError as e:
                    self.logger.warning(f"Black formatting failed: {e.stderr.decode()}")
                    return code
                finally:
                    os.unlink(f.name)
        except Exception as e:
            self.logger.error(f"Unexpected error in code formatting: {str(e)}")
            raise
    
    def validate_syntax(self, code: str) -> str:
        """Validates that the code has correct syntax."""
        try:
            ast.parse(code)
            return code
        except SyntaxError as e:
            self.logger.error(f"Syntax validation failed: {str(e)}")
            self.logger.debug(f"Invalid code: {code}")
            raise
        except Exception as e:
            self.logger.error(f"Unexpected error in syntax validation: {str(e)}")
            raise

def process_code_candidates(code_candidates: List[CodeCandidate]) -> List[CodeCandidate]:
    """Processes a list of code candidates using the PostProcessor class."""
    processor = PostProcessor()
    processed_candidates = []
    for candidate in code_candidates:
        try:
            processed = processor.process_candidate(candidate)
            processed_candidates.append(processed)
        except Exception as e:
            logger.error(f"Failed to process code candidate: {str(e)}")
            continue
    return processed_candidates